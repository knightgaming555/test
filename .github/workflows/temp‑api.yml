name: temp-api
on: workflow_dispatch

jobs:
  api:
    runs-on: ubuntu-latest
    env:
      NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          sudo apt update
          sudo apt install -y jq
          pip install flask flask-socketio eventlet >/dev/null

      - name: Create Flask API and dashboard
        run: |
          mkdir -p static
          # Flask app
          cat <<'PY' > api.py
          from flask import Flask, request, jsonify, send_from_directory
          from flask_socketio import SocketIO, send
          import threading, time

          app = Flask(__name__, static_folder='static', static_url_path='')
          socketio = SocketIO(
              app,
              cors_allowed_origins='*',
              serve_client=True,
              async_mode='eventlet'
          )

          @app.route('/')
          def index():
              return send_from_directory('static', 'index.html')

          @app.route('/ping')
          def ping():
              return jsonify(ok=True)

          @app.route('/echo', methods=['POST'])
          def echo():
              data = request.get_json(force=True)
              app.logger.info(f"Echo: {data}")
              return jsonify(echo=data)

          @socketio.on('message')
          def chat(msg):
              app.logger.info(f"Chat message: {msg}")
              socketio.emit('message', msg)

          def broadcast_logs():
              pos = 0
              while True:
                  with open('api.log') as f:
                      f.seek(pos)
                      for line in f:
                          socketio.emit('log', line)
                      pos = f.tell()
                  time.sleep(1)

          if __name__ == '__main__':
              threading.Thread(target=broadcast_logs, daemon=True).start()
              socketio.run(app, host='0.0.0.0', port=8000)
          PY

          # Dashboard HTML using CDN client
          cat <<'HTML' > static/index.html
          <!doctype html>
          <html lang="en">
          <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>API Dashboard</title>
            <style>
              body { font-family: sans-serif; padding: 1rem; }
              pre { background: #f5f5f5; padding: 0.5rem; }
            </style>
          </head>
          <body>
            <h1>API Dashboard</h1>
            <div>
              <input id="msg" placeholder="Type chat" />
              <button id="sendBtn">Send</button>
            </div>
            <h2>Chat</h2>
            <pre id="chat" style="height:200px; overflow:auto;"></pre>
            <h2>Logs</h2>
            <pre id="logs" style="height:200px; overflow:auto;"></pre>
            <script src="https://cdn.socket.io/5.3.0/socket.io.min.js"></script>
            <script>
              document.addEventListener('DOMContentLoaded', ()=>{
                console.log('Dashboard loaded');
                const socket = io({ transports: ['websocket'] });
                socket.on('connect', ()=> console.log('Socket connected'));
                socket.on('message', msg =>{
                  console.log('Received:', msg);
                  document.getElementById('chat').textContent += msg + '\n';
                });
                socket.on('log', line =>{
                  document.getElementById('logs').textContent += line;
                });
                document.getElementById('sendBtn').addEventListener('click', ()=>{
                  const inp = document.getElementById('msg');
                  console.log('Sending:', inp.value);
                  socket.emit('message', inp.value);
                  inp.value = '';
                });
              });
            </script>
          </body>
          </html>
          HTML

      - name: Start API and ngrok tunnel
        run: |
          nohup python api.py > api.log 2>&1 &
          curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
          echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
          sudo apt update && sudo apt install -y ngrok
          ngrok config add-authtoken "$NGROK_TOKEN"
          nohup ngrok http 8000 --log=stdout > ngrok.log 2>&1 &
          sleep 5
          echo "ðŸš€ Public URL: $(curl --silent http://localhost:4040/api/tunnels | jq -r '.tunnels[0].public_url')"

      - name: Keep runner alive
        run: sleep 3600
