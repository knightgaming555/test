name: realtime-chat-workflow

on:
  workflow_dispatch:

jobs:
  chat_application_server:
    runs-on: ubuntu-latest
    env:
      NGROK_TOKEN: ${{ secrets.NGROK_TOKEN }}
      LOG_LEVEL: INFO

    steps:
    # ─────────────────────────────── git & python ───────────────────────────────
    - name: Checkout
      uses: actions/checkout@v4

    - name: Set up Python 3.12
      uses: actions/setup-python@v5
      with:
        python-version: '3.12'

    - name: System packages
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl unzip

    - name: Python packages
      run: |
        python -m pip install --upgrade pip
        pip install flask flask-socketio eventlet

    # ────────────────────────────── generate files ──────────────────────────────
    - name: Create backend & frontend
      run: |
        mkdir -p static

        # ───── api.py ─────
        cat <<'PY' | sed 's/^  //' > api.py
          import os, time, threading, logging
          from collections import deque
          import eventlet
          eventlet.monkey_patch()

          from flask import Flask, jsonify, send_from_directory, request
          from flask_socketio import SocketIO, emit

          # ── logging ──
          LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO").upper()
          logging.basicConfig(
              level=LOG_LEVEL,
              format="%(asctime)s [%(levelname)s] %(name)s: %(message)s",
              handlers=[logging.FileHandler("api.log"), logging.StreamHandler()]
          )
          log = logging.getLogger("chat_app")

          # ── flask / socket.io ──
          app = Flask(__name__, static_folder='static', static_url_path='')
          socketio = SocketIO(app, async_mode='eventlet', cors_allowed_origins="*")

          chat_history = deque(maxlen=150)   # last 150 messages
          users = {}                         # sid -> display_name

          @app.route('/')
          def index():
              return send_from_directory('static', 'index.html')

          @app.route('/ping')
          def ping():
              return jsonify(ok=True, message="Pong!")

          def make_system(text):
              return {
                  "display_name": "System",
                  "text": text,
                  "timestamp": time.strftime("%H:%M:%S"),
                  "type": "system_notification"
              }

          # ── socket events ──
          @socketio.on('connect')
          def on_connect():
              sid = request.sid
              supplied = request.args.get('name') or ''
              name = supplied if supplied else f"User-{sid[:5]}"
              users[sid] = name
              log.info("%s connected", name)

              emit('your_name', name, to=sid)
              emit('chat_history', list(chat_history), to=sid)

              msg = make_system(f"{name} has joined")
              chat_history.append(msg)
              socketio.emit('new_message', msg)

          @socketio.on('disconnect')
          def on_disconnect():
              sid = request.sid
              name = users.pop(sid, f"User-{sid[:5]}")
              log.info("%s disconnected", name)

              msg = make_system(f"{name} has left")
              chat_history.append(msg)
              socketio.emit('new_message', msg)

          @socketio.on('send_message')
          def on_send_message(data):
              sid = request.sid
              name = users.get(sid, f"User-{sid[:5]}")
              text = (data or {}).get('text', '').strip()
              if not text:
                  return
              msg = {
                  "display_name": name,
                  "text": text,
                  "timestamp": time.strftime("%H:%M:%S"),
                  "type": "user_message"
              }
              chat_history.append(msg)
              log.info("Message from %s: %s", name, text)
              socketio.emit('new_message', msg)

          # ── tail api.log and push lines ──
          def tail_logs():
              try:
                  with open('api.log', 'r') as f:
                      f.seek(0, 2)
                      while True:
                          line = f.readline()
                          if line:
                              socketio.emit('server_log', {"line": line.rstrip()})
                          else:
                              eventlet.sleep(1)
              except Exception as e:
                  log.error("Log tail thread error: %s", e)

          if __name__ == '__main__':
              threading.Thread(target=tail_logs, daemon=True).start()
              socketio.run(app, host='0.0.0.0', port=8000, use_reloader=False)
        PY

        # ───── static/index.html ─────
        cat <<'HTML' | sed 's/^  //' > static/index.html
          <!DOCTYPE html>
          <html lang="en">
          <head>
            <meta charset="utf-8">
            <meta name="viewport" content="width=device-width,initial-scale=1.0">
            <title>Nexus Chat</title>
            <link href="https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&display=swap" rel="stylesheet">
            <style>
              :root{
                --bg-1:#0a0e1a;--bg-2:#111827;--bg-3:#1f2937;
                --accent-1:#3b82f6;--accent-2:#8b5cf6;
                --grad:linear-gradient(135deg,#3b82f6,#8b5cf6);
                --text-1:#f9fafb;--text-2:#d1d5db;--text-muted:#9ca3af;
                --border:rgba(75,85,99,.3);
                --shadow-lg:0 20px 25px -5px rgba(0,0,0,.3),0 10px 10px -5px rgba(0,0,0,.1);
                --shadow-xl:0 25px 50px -12px rgba(0,0,0,.5);
              }
              *{margin:0;padding:0;box-sizing:border-box}
              body{
                font-family:'Inter',sans-serif;background:var(--bg-1);
                color:var(--text-1);overflow:hidden;position:relative;
              }
              /* animated background */
              body::before{
                content:'';position:fixed;inset:0;
                background:radial-gradient(circle at 20% 80%,rgba(59,130,246,.1)0%,transparent 50%),
                           radial-gradient(circle at 80% 20%,rgba(139,92,246,.1)0%,transparent 50%),
                           radial-gradient(circle at 50% 50%,rgba(16,185,129,.05)0%,transparent 50%);
                animation:pulse 8s ease-in-out infinite alternate;z-index:-1;
              }
              @keyframes pulse{0%{opacity:.3}100%{opacity:.6}}

              .app{height:100vh;display:flex;flex-direction:column;backdrop-filter:blur(10px)}
              header{
                background:rgba(17,24,39,.8);backdrop-filter:blur(20px);
                border-bottom:1px solid var(--border);padding:1rem 2rem;
                display:flex;justify-content:space-between;align-items:center
              }
              .logo{font-size:1.5rem;font-weight:700;background:var(--grad);
                    -webkit-background-clip:text;color:transparent;display:flex;gap:.5rem}
              .logo::before{content:'◆';font-size:1.2rem;animation:spin 3s linear infinite}
              @keyframes spin{from{transform:rotate(0)}to{transform:rotate(360deg)}}

              .status{display:flex;align-items:center;gap:.5rem;font-size:.875rem;font-weight:500}
              .dot{width:8px;height:8px;border-radius:50%;background:#ef4444;animation:blink 2s infinite}
              .dot.ok{background:#10b981;animation:none}
              @keyframes blink{0%,50%{opacity:1}51%,100%{opacity:.3}}

              .main{flex:1;display:grid;grid-template-columns:2fr 1fr;gap:1px;background:var(--border);overflow:hidden}
              .panel{background:var(--bg-2);display:flex;flex-direction:column}
              .p-head{background:var(--bg-3);padding:1rem 1.5rem;font-weight:600;
                      font-size:.875rem;text-transform:uppercase;letter-spacing:.05em;color:var(--text-2);
                      border-bottom:1px solid var(--border)}
              .messages{flex:1;overflow-y:auto;padding:1.5rem;display:flex;flex-direction:column;gap:1rem;scroll-behavior:smooth}
              .messages::-webkit-scrollbar,.logs::-webkit-scrollbar{width:6px}
              .messages::-webkit-scrollbar-thumb,.logs::-webkit-scrollbar-thumb{background:var(--border);border-radius:3px}

              .bubble{max-width:80%;padding:.875rem 1.25rem;border-radius:1.25rem;word-break:break-word;
                      animation:msgIn .3s cubic-bezier(.68,-.55,.265,1.55)}
              @keyframes msgIn{from{opacity:0;transform:translateY(20px) scale(.9)}to{opacity:1;transform:none}}
              .self{align-self:flex-end;background:var(--grad);color:#fff;border-bottom-right-radius:.5rem}
              .other{align-self:flex-start;background:var(--bg-3);border:1px solid var(--border);border-bottom-left-radius:.5rem}
              .system{align-self:center;background:rgba(139,92,246,.1);border:1px solid rgba(139,92,246,.3);
                      color:var(--text-muted);font-style:italic;font-size:.875rem;border-radius:2rem;max-width:none}

              .meta{font-size:.75rem;opacity:.7;margin-bottom:.25rem;font-weight:500}
              .input-area{padding:1.5rem;background:var(--bg-3);border-top:1px solid var(--border)}
              .form{display:flex;gap:1rem}
              .msg-input{flex:1;background:var(--bg-2);border:2px solid var(--border);border-radius:1.5rem;
                         padding:1rem 1.5rem;color:var(--text-1);font-size:.9375rem;resize:none;outline:none;
                         transition:border .2s;line-height:1.4;word-break:break-word}
              .msg-input:focus{border-color:var(--accent-1);box-shadow:0 0 0 3px rgba(59,130,246,.1)}
              .send{background:var(--grad);border:none;width:48px;height:48px;border-radius:50%;color:#fff;
                    cursor:pointer;display:flex;align-items:center;justify-content:center;font-size:1.25rem;
                    box-shadow:var(--shadow-lg);transition:transform .2s}
              .send:hover{transform:translateY(-2px);box-shadow:var(--shadow-xl)}
              .send:disabled{opacity:.5;cursor:not-allowed;transform:none}

              .logs{flex:1;overflow-y:auto;padding:1rem;font-family:monospace;font-size:.8125rem;line-height:1.4;background:#0d1117}
              .log-line{margin-bottom:.25rem;color:#8b949e;word-break:break-word;animation:logIn .2s ease-out}
              @keyframes logIn{from{opacity:0;transform:translateX(-10px)}to{opacity:1;transform:none}}

              @media(max-width:1024px){.main{grid-template-columns:1fr;grid-template-rows:2fr 1fr}}
              @media(max-width:768px){
                header{padding:1rem}.logo{font-size:1.25rem}
                .messages{padding:1rem}.input-area{padding:1rem}.bubble{max-width:90%}
              }
            </style>
          </head>
          <body>
            <div class="app">
              <header>
                <div class="logo">Nexus Chat</div>
                <div class="status"><div class="dot" id="dot"></div><span id="stat">Connecting…</span></div>
              </header>

              <section class="main">
                <div class="panel">
                  <div class="p-head">Chat Room</div>
                  <div class="messages" id="chat"></div>
                  <div class="input-area">
                    <form class="form" id="form">
                      <textarea id="input" class="msg-input" rows="1" placeholder="Type your message…" disabled></textarea>
                      <button class="send" id="send" disabled>➤</button>
                    </form>
                  </div>
                </div>

                <div class="panel">
                  <div class="p-head">Server Logs</div>
                  <div class="logs" id="logs"></div>
                </div>
              </section>
            </div>

            <script src="https://cdn.socket.io/4.7.5/socket.io.min.js"></script>
            <script>
              /* ───────── helpers ───────── */
              const qs   = q => document.querySelector(q);
              const chat = qs('#chat'), logs = qs('#logs');
              const input= qs('#input'), send = qs('#send');
              const dot  = qs('#dot'), stat = qs('#stat');

              /* keep name across refresh */
              const storedName = localStorage.getItem('display_name') || '';
              const socket = io({ query: { name: storedName } });
              let me = storedName;

              /* auto‑grow textarea */
              input.addEventListener('input', e=>{
                e.target.style.height='auto';
                e.target.style.height=Math.min(e.target.scrollHeight,120)+'px';
              });

              /* enter to send */
              input.addEventListener('keydown', e=>{
                if(e.key==='Enter'&&!e.shiftKey){e.preventDefault();send.click();}
              });

              /* scroll helper */
              const bottom = el=>{el.scrollTop=el.scrollHeight};

              /* render chat msg */
              const appendMsg=m=>{
                const div=document.createElement('div');
                const sys=m.type==='system_notification';
                const mine=!sys&&m.display_name===me;
                div.className=`bubble ${sys?'system':mine?'self':'other'}`;

                if(!sys){
                  const meta=document.createElement('div');
                  meta.className='meta';
                  meta.textContent=`${m.display_name} • ${m.timestamp}`;
                  div.appendChild(meta);
                }
                const txt=document.createElement('div');
                txt.textContent=m.text;
                div.appendChild(txt);

                chat.appendChild(div);bottom(chat);
              };

              const appendLog=l=>{
                const d=document.createElement('div');
                d.className='log-line';
                d.textContent=l;
                logs.appendChild(d);
                while(logs.children.length>100)logs.removeChild(logs.firstChild);
                bottom(logs);
              };

              /* socket events */
              socket.on('your_name', n=>{me=n;localStorage.setItem('display_name',n);});
              socket.on('connect',()=>{
                dot.classList.add('ok');stat.textContent='Connected';
                input.disabled=false;send.disabled=false;
              });
              socket.on('disconnect',()=>{
                dot.classList.remove('ok');stat.textContent='Disconnected…';
                input.disabled=true;send.disabled=true;
              });
              socket.on('chat_history',h=>{chat.innerHTML='';h.forEach(appendMsg);});
              socket.on('new_message',appendMsg);
              socket.on('server_log',d=>appendLog(d.line));

              /* form submit */
              qs('#form').addEventListener('submit',e=>{
                e.preventDefault();
                const t=input.value.trim();
                if(t){socket.emit('send_message',{text:t});input.value='';input.style.height='auto';}
              });
            </script>
          </body>
          </html>
        HTML

    # ────────────────────────────── run backend ────────────────────────────────
    - name: Launch server
      run: |
        nohup python api.py > api.log 2>&1 &
        echo $! > pid
        sleep 8
        kill -0 $(cat pid) || { cat api.log; exit 1; }
        curl -s http://localhost:8000/ping || true

    # ──────────────────────────────── ngrok ───────────────────────────────────
    - name: Start ngrok
      run: |
        curl -s https://ngrok-agent.s3.amazonaws.com/ngrok.asc | sudo tee /etc/apt/trusted.gpg.d/ngrok.asc >/dev/null
        echo "deb https://ngrok-agent.s3.amazonaws.com buster main" | sudo tee /etc/apt/sources.list.d/ngrok.list
        sudo apt-get update -y && sudo apt-get install -y ngrok
        ngrok config add-authtoken "$NGROK_TOKEN"
        nohup ngrok http 8000 --log=stdout --log-level=debug > ngrok.log 2>&1 &
        for i in {1..5};do
          sleep 3
          URL=$(curl -s http://localhost:4040/api/tunnels | jq -r '.tunnels[]|select(.proto=="https")|.public_url'|head -n1)
          [ -n "$URL" ] && { echo "🚀 Ngrok URL: $URL";break; }
        done || { tail -50 ngrok.log;exit 1;}

    # ────────────────────────── show logs & hold ──────────────────────────────
    - name: Tail logs & keep runner
      run: |
        tail -n 50 api.log || true
        tail -n 20 ngrok.log || true
        echo "Runner sleeping — open URL above, press F12 for client logs."
        sleep 3600
